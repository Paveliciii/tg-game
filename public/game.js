const gameContainer = document.getElementById('game');
let board = [];
let gameOver = false;
let gameStarted = false;
let startTime = 0;
let timer = null;
let difficulty = 'easy';
let bestTimes = {
  easy: localStorage.getItem('bestTime_easy') || null,
  medium: localStorage.getItem('bestTime_medium') || null,
  hard: localStorage.getItem('bestTime_hard') || null
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const difficulties = {
  easy: { size: 5, mineCount: 5 },
  medium: { size: 8, mineCount: 12 },
  hard: { size: 10, mineCount: 20 }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gridW; // —à–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
let gridH; // –≤—ã—Å–æ—Ç–∞ –ø–æ–ª—è
let numMines; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
let mines; // –º–∞—Å—Å–∏–≤ –º–∏–Ω (1 - –º–∏–Ω–∞ –µ—Å—Ç—å, 0 - –º–∏–Ω—ã –Ω–µ—Ç)
let flags; // –º–∞—Å—Å–∏–≤ —Ñ–ª–∞–≥–æ–≤ (true - —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
let revealed; // –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ (true - –∫–ª–µ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞)

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
let longPressTimer;
let isLongPress = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const gameState = {
    width: 0,
    height: 0,
    mineCount: 0,
    mines: [],
    revealed: [],
    flags: [],
    gameBoard: [],
    gameOver: false,
    isFlagMode: false,
    remainingMines: 0
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const modal = document.getElementById('modal');
const openModalBtn = document.getElementById('openModal');
const closeModalBtn = document.getElementById('closeModal');
const startBtn = document.getElementById('startBtn');
const helpBtn = document.getElementById('help');
const closeHelpBtn = document.getElementById('close-help');
const viewPastGamesBtn = document.getElementById('view-past-games');
const closeHistoryBtn = document.getElementById('close-history');
const helpContainer = document.getElementById('help-container');
const pastGamesContainer = document.getElementById('past-games-container');
const errorMessageDiv = document.getElementById('error-message');
const gameBoardDiv = document.getElementById('game-board');
const gameStatusDiv = document.getElementById('game-status');
const flagModeBtn = document.getElementById('flag-mode');
const minesCounter = document.getElementById('mines-counter');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
openModalBtn.addEventListener('click', () => modal.showModal());
closeModalBtn.addEventListener('click', () => modal.close());
startBtn.addEventListener('click', startNewGame);
helpBtn.addEventListener('click', () => helpContainer.style.display = 'block');
closeHelpBtn.addEventListener('click', () => helpContainer.style.display = 'none');
viewPastGamesBtn.addEventListener('click', showPastGames);
closeHistoryBtn.addEventListener('click', () => pastGamesContainer.style.display = 'none');
flagModeBtn.addEventListener('click', toggleFlagMode);

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ñ–ª–∞–∂–∫–æ–≤
function toggleFlagMode() {
    gameState.isFlagMode = !gameState.isFlagMode;
    flagModeBtn.classList.toggle('active');
}

// –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function showDifficultySelection() {
  gameContainer.innerHTML = '';
  const title = document.createElement('h2');
  title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:';
  gameContainer.appendChild(title);

  const difficultyButtons = document.createElement('div');
  difficultyButtons.className = 'difficulty-buttons';
  
  ['easy', 'medium', 'hard'].forEach(diff => {
    const button = document.createElement('button');
    button.textContent = diff === 'easy' ? '–õ–µ–≥–∫–∏–π' : diff === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–°–ª–æ–∂–Ω—ã–π';
    button.className = 'difficulty-button';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (bestTimes[diff]) {
      button.textContent += ` (${formatTime(parseInt(bestTimes[diff]))})`;
    }
    
    button.addEventListener('click', () => {
      difficulty = diff;
      initGame();
    });
    
    difficultyButtons.appendChild(button);
  });
  
  gameContainer.appendChild(difficultyButtons);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–º:—Å—Å
function formatTime(ms) {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
  if (!gameStarted || gameOver) return;
  
  const currentTime = Date.now() - startTime;
  document.getElementById('timer').textContent = formatTime(currentTime);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è
function outBounds(x, y) {
  return x < 0 || y < 0 || x >= gridW || y >= gridH;
}

// –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏
function calcNear(x, y) {
  if (outBounds(x, y)) return 0;
  let count = 0;
  for (let offsetX = -1; offsetX <= 1; offsetX++) {
    for (let offsetY = -1; offsetY <= 1; offsetY++) {
      if (outBounds(x + offsetX, y + offsetY)) continue;
      count += mines[x + offsetX][y + offsetY];
    }
  }
  return count;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
function reveal(x, y) {
  if (outBounds(x, y)) return;
  if (revealed[x][y]) return;
  if (flags[x][y]) return;

  revealed[x][y] = true;
  updateCellAppearance(x, y);

  if (calcNear(x, y) !== 0) return;

  // –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
  reveal(x - 1, y - 1);
  reveal(x - 1, y + 1);
  reveal(x + 1, y - 1);
  reveal(x + 1, y + 1);
  reveal(x - 1, y);
  reveal(x + 1, y);
  reveal(x, y - 1);
  reveal(x, y + 1);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–ª–µ—Ç–∫–∏
function updateCellAppearance(x, y) {
  const index = x * gridH + y;
  const cell = board[index];
  
  if (revealed[x][y]) {
    cell.classList.add('revealed');
    const nearCount = calcNear(x, y);
    if (nearCount > 0) {
      cell.textContent = nearCount;
      cell.classList.add(`cell-${nearCount}`);
    }
  }
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ
function placeMines(excludeX, excludeY) {
  let placed = 0;
  while (placed < numMines) {
    const x = Math.floor(Math.random() * gridW);
    const y = Math.floor(Math.random() * gridH);
    
    // –ù–µ —Å—Ç–∞–≤–∏–º –º–∏–Ω—É –≤ –∫–ª–µ—Ç–∫—É –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—ë
    if (Math.abs(x - excludeX) <= 1 && Math.abs(y - excludeY) <= 1) continue;
    
    if (mines[x][y] === 0) {
      mines[x][y] = 1;
      placed++;
    }
  }
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –æ—Ç –º–∏–Ω
function clearMines() {
  for (let x = 0; x < gridW; x++) {
    for (let y = 0; y < gridH; y++) {
      mines[x][y] = 0;
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
function handleCellClick(x, y, event) {
    console.log(`–ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ: x=${x}, y=${y}`);
    
    if (gameState.gameOver) {
        console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –∫–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
        return;
    }
    
    const cellIndex = x * gameState.height + y;
    const cell = gameState.gameBoard[cellIndex];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    if (!gameStarted) {
        console.log('–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã');
        gameStarted = true;
        startTime = Date.now();
        timer = setInterval(updateTimer, 1000);
        clearMines();
        placeMines(x, y);
    }
    
    // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –Ω–∞ –Ω–µ–π —Ü–∏—Ñ—Ä–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    if (revealed[x][y] && cell.textContent) {
        console.log('–ö–ª–∏–∫ –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–µ —Å —Ü–∏—Ñ—Ä–æ–π - –ø—Ä–æ–±—É–µ–º chord click');
        handleChordClick(x, y);
        return;
    }
    
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ñ–ª–∞–∂–∫–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω
    if (gameState.isFlagMode) {
        console.log('–†–µ–∂–∏–º —Ñ–ª–∞–∂–∫–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥');
        toggleFlag(x, y);
        return;
    }
    
    // –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–ª–µ—Ç–∫–∏ —Å —Ñ–ª–∞–∂–∫–∞–º–∏
    if (gameState.flags[x][y]) {
        console.log('–ö–ª–µ—Ç–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–∂–∫–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ö–æ–¥
    const moves = JSON.parse(localStorage.getItem('moves') || '[]');
    moves.push({ x, y, result: mines[x][y] ? '–ú–∏–Ω–∞' : '–ë–µ–∑–æ–ø–∞—Å–Ω–æ' });
    localStorage.setItem('moves', JSON.stringify(moves));
    
    if (mines[x][y]) {
        console.log('–ü–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –º–∏–Ω—É - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞');
        gameState.gameOver = true;
        revealAll();
        gameStatusDiv.textContent = 'üí• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
        tg.showPopup({
            title: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞',
            message: 'üí• –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!',
            buttons: [{
                type: 'ok',
                text: '–ù–æ–≤–∞—è –∏–≥—Ä–∞'
            }]
        }).then(() => {
            modal.showModal();
        });
        saveGame(false);
        return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É
    reveal(x, y);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if (checkWin()) {
        console.log('–ü–æ–±–µ–¥–∞!');
        gameState.gameOver = true;
        const endTime = Date.now();
        const gameTime = endTime - startTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
        if (!bestTimes[difficulty] || gameTime < parseInt(bestTimes[difficulty])) {
            bestTimes[difficulty] = gameTime.toString();
            localStorage.setItem(`bestTime_${difficulty}`, gameTime);
        }
        
        gameStatusDiv.textContent = 'üéâ –ü–æ–±–µ–¥–∞!';
        tg.showPopup({
            title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
            message: `üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—Ä–µ–º—è: ${formatTime(gameTime)}`,
            buttons: [{
                type: 'ok',
                text: '–ù–æ–≤–∞—è –∏–≥—Ä–∞'
            }]
        }).then(() => {
            modal.showModal();
        });
        saveGame(true);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
function toggleFlag(x, y) {
  if (revealed[x][y]) return;
  
  const cell = gameState.gameBoard[x * gameState.height + y];
  
  if (gameState.flags[x][y]) {
    gameState.flags[x][y] = false;
    cell.classList.remove('flagged');
    gameState.remainingMines++;
  } else {
    if (gameState.remainingMines > 0) {
      gameState.flags[x][y] = true;
      cell.classList.add('flagged');
      gameState.remainingMines--;
    } else {
      tg.showAlert('–í—Å–µ —Ñ–ª–∞–∂–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!');
      return;
    }
  }
  
  updateMinesCounter();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  const size = difficulties[difficulty].size;
  numMines = difficulties[difficulty].mineCount;
  gridW = size;
  gridH = size;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
  mines = Array(gridW).fill().map(() => Array(gridH).fill(0));
  flags = Array(gridW).fill().map(() => Array(gridH).fill(false));
  revealed = Array(gridW).fill().map(() => Array(gridH).fill(false));
  
  gameContainer.innerHTML = '';
  board = [];
  gameOver = false;
  gameStarted = false;
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  createGameInterface();
  
  // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  createGameBoard();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
function createGameInterface() {
  const gameHeader = document.createElement('div');
  gameHeader.className = 'game-header';
  
  const flagCounter = document.createElement('div');
  flagCounter.id = 'flag-counter';
  flagCounter.textContent = numMines;
  
  const timerDisplay = document.createElement('div');
  timerDisplay.id = 'timer';
  timerDisplay.textContent = '00:00';
  
  const restartButton = document.createElement('button');
  restartButton.id = 'restart-button';
  restartButton.textContent = 'üîÑ';
  restartButton.addEventListener('click', () => {
    clearInterval(timer);
    initGame();
  });
  
  const backButton = document.createElement('button');
  backButton.id = 'back-button';
  backButton.textContent = '‚¨ÖÔ∏è';
  backButton.addEventListener('click', () => {
    clearInterval(timer);
    showDifficultySelection();
  });
  
  gameHeader.appendChild(flagCounter);
  gameHeader.appendChild(timerDisplay);
  gameHeader.appendChild(restartButton);
  gameHeader.appendChild(backButton);
  
  gameContainer.appendChild(gameHeader);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function createGameBoard() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    gameBoardDiv.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
    const grid = document.createElement('div');
    grid.className = 'grid';
    grid.style.gridTemplateColumns = `repeat(${gameState.width}, 1fr)`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫–∏
    for (let x = 0; x < gameState.width; x++) {
        for (let y = 0; y < gameState.height; y++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            cell.addEventListener('click', (e) => {
                e.preventDefault();
                handleCellClick(x, y, e);
            });
            
            cell.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                toggleFlag(x, y);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            cell.addEventListener('touchstart', (e) => {
                e.preventDefault();
                longPressTimer = setTimeout(() => {
                    isLongPress = true;
                    toggleFlag(x, y);
                }, 500);
            });
            
            cell.addEventListener('touchend', (e) => {
                e.preventDefault();
                clearTimeout(longPressTimer);
                if (!isLongPress) {
                    handleCellClick(x, y, e);
                }
                isLongPress = false;
            });
            
            cell.addEventListener('touchmove', (e) => {
                clearTimeout(longPressTimer);
                isLongPress = false;
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤–µ
            gameState.gameBoard.push(cell);
            grid.appendChild(cell);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    gameBoardDiv.appendChild(grid);
    console.log('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ–∑–¥–∞–Ω–æ');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–ª–∞–∂–∫–æ–≤
function updateFlagCounter() {
  let flagCount = 0;
  for (let x = 0; x < gridW; x++) {
    for (let y = 0; y < gridH; y++) {
      if (flags[x][y]) flagCount++;
    }
  }
  document.getElementById('flag-counter').textContent = numMines - flagCount;
}

// –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
function revealAll() {
  for (let x = 0; x < gridW; x++) {
    for (let y = 0; y < gridH; y++) {
      const index = x * gridH + y;
      const cell = board[index];
      
      if (mines[x][y] === 1) {
        cell.classList.add('mine');
        if (flags[x][y]) {
          cell.classList.add('correct-flag');
        }
      } else if (flags[x][y]) {
        cell.classList.add('wrong-flag');
      }
      
      if (!revealed[x][y] && !flags[x][y]) {
        revealed[x][y] = true;
        updateCellAppearance(x, y);
      }
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin() {
  let unrevealedSafeCells = 0;
  for (let x = 0; x < gridW; x++) {
    for (let y = 0; y < gridH; y++) {
      if (!revealed[x][y] && mines[x][y] === 0) {
        unrevealedSafeCells++;
      }
    }
  }
  
  if (unrevealedSafeCells === 0) {
    gameOver = true;
    clearInterval(timer);
    
    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –º–∏–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏
    for (let x = 0; x < gridW; x++) {
      for (let y = 0; y < gridH; y++) {
        if (mines[x][y] === 1 && !flags[x][y]) {
          flags[x][y] = true;
          board[x * gridH + y].classList.add('flagged');
        }
      }
    }
    
    const gameTime = Date.now() - startTime;
    let newRecord = false;
    
    if (!bestTimes[difficulty] || gameTime < parseInt(bestTimes[difficulty])) {
      bestTimes[difficulty] = gameTime.toString();
      localStorage.setItem(`bestTime_${difficulty}`, gameTime);
      newRecord = true;
    }
    
    const message = newRecord 
      ? `üéâ –ü–æ–±–µ–¥–∞! –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: ${formatTime(gameTime)}!` 
      : `üéâ –ü–æ–±–µ–¥–∞! –í–∞—à–µ –≤—Ä–µ–º—è: ${formatTime(gameTime)}. –†–µ–∫–æ—Ä–¥: ${formatTime(parseInt(bestTimes[difficulty]))}`;
    
    tg.showAlert(message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function startNewGame() {
    const width = parseInt(document.getElementById('width').value);
    const height = parseInt(document.getElementById('height').value);
    const mineCount = parseInt(document.getElementById('mines').value);

    if (mineCount >= width * height) {
        showError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–µ—Ç–æ–∫');
        return;
    }

    if (width < 5 || height < 5 || width > 16 || height > 16) {
        showError('–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5x5 –¥–æ 16x16');
        return;
    }

    gameState.width = width;
    gameState.height = height;
    gameState.mineCount = mineCount;

    modal.close();
    initializeGame();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const settings = difficulties[difficulty];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    gameState.width = settings.size;
    gameState.height = settings.size;
    gameState.mineCount = settings.mineCount;
    gameState.gameOver = false;
    gameState.isFlagMode = false;
    gameState.remainingMines = settings.mineCount;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã
    gameState.mines = Array(settings.size).fill().map(() => Array(settings.size).fill(0));
    gameState.revealed = Array(settings.size).fill().map(() => Array(settings.size).fill(false));
    gameState.flags = Array(settings.size).fill().map(() => Array(settings.size).fill(false));
    gameState.gameBoard = [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    gridW = settings.size;
    gridH = settings.size;
    numMines = settings.mineCount;
    mines = gameState.mines;
    revealed = gameState.revealed;
    flags = gameState.flags;
    board = gameState.gameBoard;
    gameOver = false;
    gameStarted = false;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (timer) {
        clearInterval(timer);
        timer = null;
    }
    startTime = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateMinesCounter();
    document.getElementById('timer').textContent = '00:00';
    gameStatusDiv.textContent = '';
    
    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', gameState);
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    createGameBoard();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function createBoard() {
    gameBoardDiv.innerHTML = '';
    gameBoardDiv.style.gridTemplateColumns = `repeat(${gameState.width}, 35px)`;
    
    for (let x = 0; x < gameState.width; x++) {
        for (let y = 0; y < gameState.height; y++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.x = x;
            cell.dataset.y = y;
            
            cell.addEventListener('click', () => handleCellClick(x, y));
            
            gameBoardDiv.appendChild(cell);
            gameState.gameBoard.push(cell);
        }
    }
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω
function placeMines() {
    let placedMines = 0;
    while (placedMines < gameState.mineCount) {
        const x = Math.floor(Math.random() * gameState.width);
        const y = Math.floor(Math.random() * gameState.height);
        
        if (!gameState.mines[x][y]) {
            gameState.mines[x][y] = true;
            placedMines++;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–Ω
function updateMinesCounter() {
    minesCounter.textContent = `–ú–∏–Ω—ã: ${gameState.remainingMines}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ —Ü–∏—Ñ—Ä—ã
function handleChordClick(x, y) {
    const number = parseInt(gameState.gameBoard[x * gameState.height + y].textContent);
    if (!number) return;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤ –≤–æ–∫—Ä—É–≥
    let flagCount = 0;
    for (let dx = -1; dx <= 1; dx++) {
        for (let dy = -1; dy <= 1; dy++) {
            const newX = x + dx;
            const newY = y + dy;
            if (newX >= 0 && newX < gameState.width && newY >= 0 && newY < gameState.height && gameState.flags[newX][newY]) {
                flagCount++;
            }
        }
    }
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–∏—Ñ—Ä–æ–π
    if (flagCount === number) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥
        for (let dx = -1; dx <= 1; dx++) {
            for (let dy = -1; dy <= 1; dy++) {
                const newX = x + dx;
                const newY = y + dy;
                if (newX >= 0 && newX < gameState.width && newY >= 0 && newY < gameState.height && !gameState.flags[newX][newY] && !gameState.revealed[newX][newY]) {
                    handleCellClick(newX, newY);
                }
            }
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame(isWin) {
    const gameData = {
        timestamp: new Date().toISOString(),
        size: `${gameState.width}x${gameState.height}`,
        mines: gameState.mineCount,
        result: isWin ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'
    };
    
    let games = JSON.parse(localStorage.getItem('minesweeper_games') || '[]');
    games.unshift(gameData);
    localStorage.setItem('minesweeper_games', JSON.stringify(games.slice(0, 10))); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—à–ª—ã—Ö –∏–≥—Ä
function showPastGames() {
    const games = JSON.parse(localStorage.getItem('minesweeper_games') || '[]');
    const gameList = document.getElementById('game-list');
    gameList.innerHTML = '';
    
    games.forEach(game => {
        const li = document.createElement('li');
        const date = new Date(game.timestamp);
        li.textContent = `${date.toLocaleDateString()} ${date.toLocaleTimeString()} - ${game.size} - ${game.mines} –º–∏–Ω - ${game.result}`;
        gameList.appendChild(li);
    });
    
    pastGamesContainer.style.display = 'block';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showError(message) {
    errorMessageDiv.textContent = message;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
modal.showModal();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
showDifficultySelection();