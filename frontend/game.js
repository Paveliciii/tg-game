const gameContainer = document.getElementById('game');
let board = [];
let gameOver = false;
let gameStarted = false;
let startTime = 0;
let timer = null;
let difficulty = 'easy';
let bestTimes = {
  easy: localStorage.getItem('bestTime_easy') || null,
  medium: localStorage.getItem('bestTime_medium') || null,
  hard: localStorage.getItem('bestTime_hard') || null
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const difficulties = {
  easy: { size: 5, mines: 5 },
  medium: { size: 8, mines: 12 },
  hard: { size: 10, mines: 20 }
};

// Initialize Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–º:—Å—Å
function formatTime(ms) {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
  if (!gameStarted || gameOver) return;
  
  const currentTime = Date.now() - startTime;
  document.getElementById('timer').textContent = formatTime(currentTime);
}

// –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function showDifficultySelection() {
  gameContainer.innerHTML = '';
  
  const title = document.createElement('h2');
  title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:';
  gameContainer.appendChild(title);

  const difficultyButtons = document.createElement('div');
  difficultyButtons.className = 'difficulty-buttons';
  
  for (const diff of ['easy', 'medium', 'hard']) {
    const button = document.createElement('button');
    button.textContent = diff === 'easy' ? '–õ–µ–≥–∫–∏–π' : diff === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–°–ª–æ–∂–Ω—ã–π';
    button.className = 'difficulty-button';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (bestTimes[diff]) {
      button.textContent += ` (${formatTime(parseInt(bestTimes[diff]))})`;
    }
    
    button.addEventListener('click', () => {
      difficulty = diff;
      initGame();
    });
    
    difficultyButtons.appendChild(button);
  }
  
  gameContainer.appendChild(difficultyButtons);
}

// –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
function revealAll() {
  board.forEach(cell => {
    if (cell.dataset.mine === 'true') {
      cell.classList.add('mine');
      if (cell.classList.contains('flagged')) {
        cell.classList.add('correct-flag');
      }
    } else if (cell.classList.contains('flagged')) {
      cell.classList.add('wrong-flag');
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–ª–∞–∂–∫–æ–≤
function updateFlagCounter() {
  const flaggedCount = board.filter(cell => cell.classList.contains('flagged')).length;
  const mineCount = difficulties[difficulty].mines;
  document.getElementById('flag-counter').textContent = mineCount - flaggedCount;
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
function startGame() {
  gameStarted = true;
  startTime = Date.now();
  if (timer) clearInterval(timer);
  timer = setInterval(updateTimer, 1000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin() {
  const mineCount = difficulties[difficulty].mines;
  const size = difficulties[difficulty].size;
  const revealed = board.filter(cell => cell.classList.contains('revealed')).length;
  
  if (revealed === size * size - mineCount) {
    gameOver = true;
    clearInterval(timer);
    
    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –º–∏–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏
    board.forEach(cell => {
      if (cell.dataset.mine === 'true' && !cell.classList.contains('flagged')) {
        cell.classList.add('flagged');
      }
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
    const gameTime = Date.now() - startTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª—É—á—à–µ–µ –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è
    let newRecord = false;
    if (!bestTimes[difficulty] || gameTime < parseInt(bestTimes[difficulty])) {
      bestTimes[difficulty] = gameTime.toString();
      localStorage.setItem(`bestTime_${difficulty}`, gameTime);
      newRecord = true;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const message = newRecord 
      ? `üéâ –ü–æ–±–µ–¥–∞! –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: ${formatTime(gameTime)}!` 
      : `üéâ –ü–æ–±–µ–¥–∞! –í–∞—à–µ –≤—Ä–µ–º—è: ${formatTime(gameTime)}. –†–µ–∫–æ—Ä–¥: ${formatTime(parseInt(bestTimes[difficulty]))}`;
    
    tg.showAlert(message);
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
function revealCell(cell) {
  if (cell.classList.contains('revealed') || cell.classList.contains('flagged')) return;
  
  cell.classList.add('revealed');
  const index = parseInt(cell.dataset.index);
  const size = difficulties[difficulty].size;
  const row = Math.floor(index / size);
  const col = index % size;
  
  // –ü–æ–¥—Å—á–µ—Ç –º–∏–Ω –≤–æ–∫—Ä—É–≥
  let count = 0;
  for (let i = -1; i <= 1; i++) {
    for (let j = -1; j <= 1; j++) {
      const newRow = row + i;
      const newCol = col + j;
      if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {
        const adjacentIndex = newRow * size + newCol;
        if (board[adjacentIndex].dataset.mine === 'true') {
          count++;
        }
      }
    }
  }
  
  if (count > 0) {
    cell.textContent = count;
    cell.classList.add(`cell-${count}`); // –î–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã
    cell.addEventListener('click', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ñ–ª–∞–∂–∫–æ–≤ –≤–æ–∫—Ä—É–≥
      let flaggedCount = 0;
      let adjacentCells = [];
      
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          const newRow = row + i;
          const newCol = col + j;
          if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {
            const adjacentIndex = newRow * size + newCol;
            const adjacentCell = board[adjacentIndex];
            
            if (adjacentCell.classList.contains('flagged')) {
              flaggedCount++;
            } else if (!adjacentCell.classList.contains('revealed')) {
              adjacentCells.push(adjacentCell);
            }
          }
        }
      }
      
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–∏—Ñ—Ä–µ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏
      if (flaggedCount === count) {
        adjacentCells.forEach(adjacentCell => {
          handleCellClick(adjacentCell);
        });
      }
    });
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –º–∏–Ω —Ä—è–¥–æ–º, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        const newRow = row + i;
        const newCol = col + j;
        if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {
          const adjacentIndex = newRow * size + newCol;
          revealCell(board[adjacentIndex]);
        }
      }
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
function handleCellClick(cell) {
  if (gameOver || cell.classList.contains('revealed') || cell.classList.contains('flagged')) return;
  
  // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –º–∏–Ω—É
  if (!gameStarted) {
    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –º–∏–Ω—É, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ—ë
    if (cell.dataset.mine === 'true') {
      cell.dataset.mine = 'false';
      
      // –ù–∞–π–¥–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –º–∏–Ω—ã
      for (let i = 0; i < board.length; i++) {
        if (board[i].dataset.mine === 'false' && board[i] !== cell) {
          board[i].dataset.mine = 'true';
          break;
        }
      }
    }
    
    startGame();
  }
  
  if (cell.dataset.mine === 'true') {
    gameOver = true;
    revealAll();
    clearInterval(timer);
    tg.showAlert('üí• –ë—É–º! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
  } else {
    revealCell(cell);
    checkWin();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  const size = difficulties[difficulty].size;
  const mineCount = difficulties[difficulty].mines;
  
  gameContainer.innerHTML = '';
  board = [];
  gameOver = false;
  gameStarted = false;
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const gameHeader = document.createElement('div');
  gameHeader.className = 'game-header';
  
  // –°—á–µ—Ç—á–∏–∫ —Ñ–ª–∞–∂–∫–æ–≤
  const flagCounter = document.createElement('div');
  flagCounter.id = 'flag-counter';
  flagCounter.textContent = mineCount;
  
  // –¢–∞–π–º–µ—Ä
  const timerDisplay = document.createElement('div');
  timerDisplay.id = 'timer';
  timerDisplay.textContent = '00:00';
  
  // –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
  const restartButton = document.createElement('button');
  restartButton.id = 'restart-button';
  restartButton.textContent = 'üîÑ';
  restartButton.addEventListener('click', () => {
    clearInterval(timer);
    initGame();
  });
  
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const backButton = document.createElement('button');
  backButton.id = 'back-button';
  backButton.textContent = '‚¨ÖÔ∏è';
  backButton.addEventListener('click', () => {
    clearInterval(timer);
    showDifficultySelection();
  });
  
  gameHeader.appendChild(flagCounter);
  gameHeader.appendChild(timerDisplay);
  gameHeader.appendChild(restartButton);
  gameHeader.appendChild(backButton);
  
  gameContainer.appendChild(gameHeader);
  
  // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  const boardElement = document.createElement('div');
  boardElement.id = 'board';
  boardElement.style.gridTemplateColumns = `repeat(${size}, 40px)`;
  gameContainer.appendChild(boardElement);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
  const minePositions = new Set();
  while (minePositions.size < mineCount) {
    minePositions.add(Math.floor(Math.random() * size * size));
  }
  
  // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏
  for (let i = 0; i < size * size; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    cell.dataset.index = i;
    cell.dataset.mine = minePositions.has(i) ? 'true' : 'false';
    
    // –õ–µ–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
    cell.addEventListener('click', () => {
      handleCellClick(cell);
    });
    
    // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–∂–∫–∞
    cell.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      if (gameOver) return;
      
      if (!gameStarted) {
        startGame();
      }
      
      if (!cell.classList.contains('revealed')) {
        cell.classList.toggle('flagged');
        updateFlagCounter();
      }
    });
    
    boardElement.appendChild(cell);
    board.push(cell);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
showDifficultySelection();